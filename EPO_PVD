import numpy as np
from ressure_vessel_design import *
# The temperature profile around the huddle
def temp(Itr, MaxItr, R):
    R = np.random.uniform()
    if R >= 1:
        T = 0
    else:
        T = 1
    return T - Itr/(MaxItr - Itr)


# Modified EPO based weighted sum and information vector
def EPOWIV(pop_size, MaxItr, R, T = 0.4):
    # Initialize the emperor penguins population
    population = [generateSol() for _ in range(20)]
    func1 = lambda sol:PVD(sol)
    # Calculate the fitness value of each search agent
    fitness = [PVD(i) for i in population]
    Gbest = population[np.argmin(fitness),:]
    best = min(fitness)
    k = 1
    P_vector_1 = np.array([])
    # i belongs to [0, MaxItr -1]
    for i in range(MaxItr):
        for j in range(pop_size):
            # Update position
            Current_Position = population[j]
            Relocating = RelocateWIV(Gbest, Current_Position, i, MaxItr, R, func1)
            Current_Position = Relocating[0]
            fitness[j] = Relocating[1]
            if fitness[j] <= best:
                best = fitness[j]
                Gbest = Current_Position
        P_vector_1 = np.append(P_vector_1,best)

    return best, Gbest

def RelocateWIV(P, P_other, Itr, MaxItr, R, func1, thershold = 0.5):
    # Compute the temperature profile around the huddle
    R = np.random.uniform(-1, 1)
    Temp = temp(Itr, MaxItr, R)
    # The polygon grid accuracy
    P_grid = abs(P - P_other)
    # Calculate avoid collision parameter
    A = 1.5 * (Temp + P_grid) * np.random.uniform() - Temp
    # The social forces of emperor penguins
    S = np.sqrt(np.random.uniform(3, 15) * np.exp(-Itr/np.random.uniform(3, 15)) - np.exp(-Itr))
    # Relocate penguin
    D = abs(S * P - np.random.uniform() * P_other)
    modified = P - A * D
    # Weigthed sum process
    EvalP = func1(P)
    EvalOther = func1(P_other)
    EvalModified = func1(modified)
    TotalEval = EvalP + EvalOther + EvalModified
    # w1, w2, w3 = EvalP/TotalEval, EvalOther/TotalEval, EvalModified/TotalEval
    w1, w2 = EvalP/TotalEval, EvalModified/TotalEval
    newpositionw = weightedSum(P, modified,  w1, w2)
    # Infromation vector process
    newpositionIV = np.array([])
    for i in range(len(modified)):
        if np.random.uniform() > thershold:
            newpositionIV = np.append(newpositionIV,P[i])
        else:
            newpositionIV = np.append(newpositionIV, newpositionw[i])
    Solutions = [P_other, newpositionIV, modified]
    Evals = [func1(i) for i in Solutions]
    newposition = Solutions[np.argmin(Evals)]
    # print(min(Evals), 1)
    return newposition, func1(newposition)

def weightedSum(sol1 = 0, sol2 = 0, sol3 = 0,  w1 = 0, w2 = 0, w3 = 0):
    return w1 * sol1 + w2 * sol2 + w3 * sol3